buildscript {
    repositories {
        mavenLocal()
        mavenCentral()
        jcenter()
    }
    dependencies {
        classpath group: 'net.researchgate', name: 'gradle-release', version: '2.6.0'
        classpath 'org.kt3k.gradle.plugin:coveralls-gradle-plugin:2.4.0'
        classpath 'com.jfrog.bintray.gradle:gradle-bintray-plugin:1.7.3'
        classpath 'com.github.jengelman.gradle.plugins:shadow:2.0.1'
    }
}

apply plugin: 'maven'
apply plugin: 'com.jfrog.bintray'
apply plugin: 'com.github.johnrengelman.shadow'
apply plugin: 'java'

group = "org.grobid"

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}


repositories {
    mavenLocal()
    mavenCentral()
    jcenter()
    maven { url "https://dl.bintray.com/rookies/maven" }
}
                  
dependencies {
    // This dependency is exported to consumers, that is to say found on their compile classpath.
//    api 'org.apache.commons:commons-math3:3.6.1'

    // This dependency is used internally, and not exposed to consumers on their own compile classpath.
//    implementation 'com.google.guava:guava:22.0'

    //Tests
    testImplementation 'junit:junit:4.12'
    testImplementation 'org.easymock:easymock:3.4'
    testImplementation 'org.hamcrest:hamcrest-all:1.3'

    //GROBID
    implementation 'org.grobid:grobid-core:0.5.1'
    implementation 'org.grobid:grobid-trainer:0.5.1'

    //Apache commons
    implementation 'org.apache.commons:commons-collections4:4.1'
    implementation 'org.apache.commons:commons-lang3:3.0.1'

    // xml parsing
    implementation 'org.codehaus.woodstox:stax2-api:3.1.4'
    implementation 'com.fasterxml.woodstox:woodstox-core:5.0.3'

    //NLP
    implementation 'edu.emory.mathcs.nlp:nlp4j-api:1.1.3'
    implementation 'edu.emory.mathcs.nlp:nlp4j-english:1.1.3'
}

def trainerTasks = [
        //Training models 
        "train_temporalExpression": "org.grobid.trainer.TemporalExpressionTrainer",
        "train_ner"               : "org.grobid.trainer.NEREnglishTrainer",
        "train_nerfr"             : "org.grobid.trainer.NERFrenchTrainer",
        "train_nersense"          : "org.grobid.trainer.SenseTrainer",

        // CONLL
        "eval_conll"              : "org.grobid.trainer.NEREvaluation",
        "train_conll"             : "org.grobid.trainer.CoNNLNERTrainer"
]

trainerTasks.each { taskName, mainClassName ->
    tasks.create(name: taskName, type: JavaExec, group: 'training') {
        main = mainClassName
        classpath = sourceSets.main.runtimeClasspath
    }
}

// return the default value if the property has not been specified in command line 
ext.getArg = { propName, defaultVal ->
    return project.hasProperty(propName) ? project.getProperty(propName) : defaultVal;
}

// Train and evaluation NER
// run like: gradle trainEvalNer -gH /path/to/grobid-home
task trainEvalNer(dependsOn: 'classes', type: JavaExec, group: 'training') {
    main = 'org.grobid.trainer.NERTrainerRunner'
    classpath = sourceSets.main.runtimeClasspath
    args 2, 'ner', '-gH', getArg('gH', '../../grobid-home'), '-s', getArg('s', '0.8')
    jvmArgs '-Xmx3072m'
}

// Evaluation NER
// run like: gradle evalNer -gH /path/to/grobid-home
task evalNer(dependsOn: 'classes', type: JavaExec, group: 'training') {
    main = 'org.grobid.trainer.NERTrainerRunner'
    classpath = sourceSets.main.runtimeClasspath
    args 1, 'ner', '-gH', getArg('gH', '../../grobid-home')
    jvmArgs '-Xmx3072m'
}

// Train and evaluation NER FR
// run like: gradle trainEvalNerFr -gH /path/to/grobid-home
task trainEvalNerFr(dependsOn: 'classes', type: JavaExec, group: 'training') {
    main = 'org.grobid.trainer.NERTrainerRunner'
    classpath = sourceSets.main.runtimeClasspath
    args 2, 'nerfr', '-gH', getArg('gH', '../../grobid-home'), '-s', getArg('s', '0.8')
    jvmArgs '-Xmx3072m'
}

// Evaluation NER FR
// run like: gradle evalNerFr -gH /path/to/grobid-home
task evalNerFr(dependsOn: 'classes', type: JavaExec, group: 'training') {
    main = 'org.grobid.trainer.NERTrainerRunner'
    classpath = sourceSets.main.runtimeClasspath
    args 1, 'nerfr', '-gH', getArg('gH', '../../grobid-home')
    jvmArgs '-Xmx3072m'
}

import com.github.jengelman.gradle.plugins.shadow.tasks.ShadowJar

task mainJar(type: ShadowJar, group: 'test') {
    zip64 true
    from sourceSets.main.output
    from {
        project.configurations.compile.collect {
            it.isDirectory() ? [] : localLibs.contains(it.getName()) ? zipTree(it) : []
        }
    }
}

shadowJar {
    classifier = 'onejar'
    zip64 true
    manifest {
        attributes 'Main-Class': 'org.grobid.core.main.batch.NERMain'
    }
}

jar {
    dependsOn mainJar
    enabled false
}

artifacts {
    archives shadowJar
    archives mainJar
}

/*tasks.withType(JavaCompile) {
    options.compilerArgs << "-Xlint:deprecation"
    options.compilerArgs << "-Xlint:unchecked"
}*/




